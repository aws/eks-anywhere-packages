{{- $render := include "eks-anywhere-packages.rendertype" . }}
{{- $namespace := .Values.namespace }}
{{- $regSecret := (lookup "v1" "Secret" $namespace "registry-mirror-secret") }}
{{- if (ne $render "controller") }}
{{- $namespace = printf "%s-%s" $namespace .Values.clusterName -}}
{{- $regSecret = (lookup "v1" "Secret" $namespace "registry-mirror-secret") }}
{{- end }}
apiVersion: v1
kind: Secret
metadata:
  name: registry-mirror-secret
  namespace: {{ $namespace }}
data:
  {{- $endpoint := .Values.registryMirrorSecret.endpoint }}
  {{- $username := .Values.registryMirrorSecret.username }}
  {{- $password := .Values.registryMirrorSecret.password }}
  {{- $cacertcontent := .Values.registryMirrorSecret.cacertcontent }}
  {{- $insecure := .Values.registryMirrorSecret.insecure }}
  {{- if $regSecret }}
  {{- if (eq $endpoint "") }}
  {{- $endpoint = get $regSecret.data "ENDPOINT" }}
  {{- end }}
  {{- if (eq $username "") }}
  {{- $username = get $regSecret.data "USERNAME" }}
  {{- end }}
  {{- if (eq $password "") }}
  {{- $password = get $regSecret.data "PASSWORD" }}
  {{- end }}
  {{- if (eq $cacertcontent "") }}
  {{- $cacertcontent = get $regSecret.data "CACERTCONTENT" }}
  {{- end }}
  {{- if (eq $insecure "") }}
  {{- $insecure = get $regSecret.data "INSECURE" }}
  {{- end }}
  {{- end }}
  ENDPOINT: "{{ $endpoint }}"
  USERNAME: "{{ $username }}"
  PASSWORD: "{{ $password }}"
  CACERTCONTENT: "{{ $cacertcontent }}"
  INSECURE: "{{ $insecure }}"
type: Opaque
