{{- $render := include "eks-anywhere-packages.rendertype" . }}
{{- $namespace := printf "%s-%s" "eksa-packages" .Values.clusterName -}}
{{- $mgmtNamespace := printf "%s-%s" "eksa-packages" .Values.managementClusterName -}}
{{- if eq $render "controller" }}
{{- if not (lookup "packages.eks.amazonaws.com/v1alpha1" "Package" $namespace "eks-anywhere-packages") }}
apiVersion: packages.eks.amazonaws.com/v1alpha1
kind: Package
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  name: eks-anywhere-packages
  namespace: {{ $namespace }}
spec:
  packageName: eks-anywhere-packages
  targetNamespace: eksa-packages
  config: |
    {{- with .Values }}
    {{- $controller := pick .controller "env" }}
    {{- $newValues := pick . "proxy" "sourceRegistry" "clusterName" "privateRegistry" "imagePullPolicy" "defaultRegistry" "defaultImageRegistry" }}
    {{- $_ := set $newValues "controller" $controller }}
    {{- toYaml $newValues | nindent 4 }}
    {{- end }}
{{- end }}
{{ else if eq $render "package" }}
apiVersion: packages.eks.amazonaws.com/v1alpha1
kind: Package
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  name: eks-anywhere-packages-{{ .Values.clusterName }}
  namespace: {{ $mgmtNamespace }}
spec:
  packageName: eks-anywhere-packages
  targetNamespace: {{ $namespace }}
  config: |
    workloadOnly: true
    clusterName: {{ .Values.clusterName }}
    sourceRegistry: {{ .Values.sourceRegistry }}
    defaultRegistry: {{ .Values.defaultRegistry }}
    defaultImageRegistry: {{ .Values.defaultImageRegistry }} 
{{- end }}

