// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	packages "github.com/aws/eks-anywhere-packages/pkg/packages"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockManager) Process(mc *packages.ManagerContext) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", mc)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockManagerMockRecorder) Process(mc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockManager)(nil).Process), mc)
}
