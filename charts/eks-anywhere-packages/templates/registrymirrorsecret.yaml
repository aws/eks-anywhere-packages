{{- $render := include "eks-anywhere-packages.rendertype" . }}
{{- $workloadNamespace := printf "%s-%s" "eksa-packages" .Values.clusterName -}}
{{- if (eq $render "controller") }}
{{- if or (not (lookup "v1" "Secret" "eksa-packages" "registry-mirror-secret")) (ne .Values.registryMirrorSecret.endpoint "") -}}
# We are creating the Secret only if it is not found or if endpoint is not empty
# This condition ensures the secret is not accidentally set to empty values
# Similar condition when installing on a workload cluster
apiVersion: v1
kind: Secret
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  name: registry-mirror-secret
  namespace: {{ .Values.namespace }}
data:
  {{- with .Values.registryMirrorSecret }}
  ENDPOINT: "{{ .endpoint }}"
  USERNAME: "{{ .username }}"
  PASSWORD: "{{ .password }}"
  CACERTCONTENT: "{{ .cacertcontent }}"
  INSECURE: "{{ .insecure }}"
  {{- end }}
type: Opaque
{{- end }}
{{- end }}
{{- if (eq $render "workload") }}
{{- if or (not (lookup "v1" "Secret" $workloadNamespace "registry-mirror-secret")) (ne .Values.registryMirrorSecret.endpoint "") -}}
apiVersion: v1
kind: Secret
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  name: registry-mirror-secret
  namespace: {{ .Values.namespace }}-{{ .Values.clusterName }}
data:
  {{- with .Values.registryMirrorSecret }}
  ENDPOINT: "{{ .endpoint }}"
  USERNAME: "{{ .username }}"
  PASSWORD: "{{ .password }}"
  CACERTCONTENT: "{{ .cacertcontent }}"
  INSECURE: "{{ .insecure }}"
  {{- end }}
type: Opaque
{{- end }}
{{- end }}
