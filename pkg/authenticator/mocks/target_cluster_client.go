// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/authenticator/target_cluster_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	version "k8s.io/apimachinery/pkg/version"
)

// MockTargetClusterClient is a mock of TargetClusterClient interface.
type MockTargetClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockTargetClusterClientMockRecorder
}

// MockTargetClusterClientMockRecorder is the mock recorder for MockTargetClusterClient.
type MockTargetClusterClientMockRecorder struct {
	mock *MockTargetClusterClient
}

// NewMockTargetClusterClient creates a new mock instance.
func NewMockTargetClusterClient(ctrl *gomock.Controller) *MockTargetClusterClient {
	mock := &MockTargetClusterClient{ctrl: ctrl}
	mock.recorder = &MockTargetClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetClusterClient) EXPECT() *MockTargetClusterClientMockRecorder {
	return m.recorder
}

// GetKubeconfigFile mocks base method.
func (m *MockTargetClusterClient) GetKubeconfigFile(ctx context.Context, clusterName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeconfigFile", ctx, clusterName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeconfigFile indicates an expected call of GetKubeconfigFile.
func (mr *MockTargetClusterClientMockRecorder) GetKubeconfigFile(ctx, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeconfigFile", reflect.TypeOf((*MockTargetClusterClient)(nil).GetKubeconfigFile), ctx, clusterName)
}

// GetKubeconfigString mocks base method.
func (m *MockTargetClusterClient) GetKubeconfigString(ctx context.Context, clusterName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeconfigString", ctx, clusterName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubeconfigString indicates an expected call of GetKubeconfigString.
func (mr *MockTargetClusterClientMockRecorder) GetKubeconfigString(ctx, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeconfigString", reflect.TypeOf((*MockTargetClusterClient)(nil).GetKubeconfigString), ctx, clusterName)
}

// GetServerVersion mocks base method.
func (m *MockTargetClusterClient) GetServerVersion(ctx context.Context, clusterName string) (*version.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerVersion", ctx, clusterName)
	ret0, _ := ret[0].(*version.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerVersion indicates an expected call of GetServerVersion.
func (mr *MockTargetClusterClientMockRecorder) GetServerVersion(ctx, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerVersion", reflect.TypeOf((*MockTargetClusterClient)(nil).GetServerVersion), ctx, clusterName)
}
