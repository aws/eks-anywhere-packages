// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/aws/eks-anywhere-packages/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreatePackage mocks base method.
func (m *MockClient) CreatePackage(ctx context.Context, pkg *v1alpha1.Package) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePackage", ctx, pkg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePackage indicates an expected call of CreatePackage.
func (mr *MockClientMockRecorder) CreatePackage(ctx, pkg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackage", reflect.TypeOf((*MockClient)(nil).CreatePackage), ctx, pkg)
}

// GetPackageList mocks base method.
func (m *MockClient) GetPackageList(ctx context.Context, namespace string) (v1alpha1.PackageList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageList", ctx, namespace)
	ret0, _ := ret[0].(v1alpha1.PackageList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageList indicates an expected call of GetPackageList.
func (mr *MockClientMockRecorder) GetPackageList(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageList", reflect.TypeOf((*MockClient)(nil).GetPackageList), ctx, namespace)
}
