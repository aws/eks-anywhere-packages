// Code generated by MockGen. DO NOT EDIT.
// Source: target_cluster_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	meta "k8s.io/apimachinery/pkg/api/meta"
	version "k8s.io/apimachinery/pkg/version"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	clientcmd "k8s.io/client-go/tools/clientcmd"
)

// MockTargetClusterClient is a mock of TargetClusterClient interface.
type MockTargetClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockTargetClusterClientMockRecorder
}

// MockTargetClusterClientMockRecorder is the mock recorder for MockTargetClusterClient.
type MockTargetClusterClientMockRecorder struct {
	mock *MockTargetClusterClient
}

// NewMockTargetClusterClient creates a new mock instance.
func NewMockTargetClusterClient(ctrl *gomock.Controller) *MockTargetClusterClient {
	mock := &MockTargetClusterClient{ctrl: ctrl}
	mock.recorder = &MockTargetClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetClusterClient) EXPECT() *MockTargetClusterClientMockRecorder {
	return m.recorder
}

// ApplySecret mocks base method.
func (m *MockTargetClusterClient) ApplySecret(ctx context.Context, secret *v1.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySecret", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplySecret indicates an expected call of ApplySecret.
func (mr *MockTargetClusterClientMockRecorder) ApplySecret(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySecret", reflect.TypeOf((*MockTargetClusterClient)(nil).ApplySecret), ctx, secret)
}

// CheckNamespace mocks base method.
func (m *MockTargetClusterClient) CheckNamespace(ctx context.Context, namespace string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNamespace", ctx, namespace)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckNamespace indicates an expected call of CheckNamespace.
func (mr *MockTargetClusterClientMockRecorder) CheckNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNamespace", reflect.TypeOf((*MockTargetClusterClient)(nil).CheckNamespace), ctx, namespace)
}

// CreateClusterNamespace mocks base method.
func (m *MockTargetClusterClient) CreateClusterNamespace(ctx context.Context, clusterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterNamespace", ctx, clusterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterNamespace indicates an expected call of CreateClusterNamespace.
func (mr *MockTargetClusterClientMockRecorder) CreateClusterNamespace(ctx, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterNamespace", reflect.TypeOf((*MockTargetClusterClient)(nil).CreateClusterNamespace), ctx, clusterName)
}

// GetServerVersion mocks base method.
func (m *MockTargetClusterClient) GetServerVersion(ctx context.Context, clusterName string) (*version.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerVersion", ctx, clusterName)
	ret0, _ := ret[0].(*version.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerVersion indicates an expected call of GetServerVersion.
func (mr *MockTargetClusterClientMockRecorder) GetServerVersion(ctx, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerVersion", reflect.TypeOf((*MockTargetClusterClient)(nil).GetServerVersion), ctx, clusterName)
}

// Initialize mocks base method.
func (m *MockTargetClusterClient) Initialize(ctx context.Context, clusterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx, clusterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockTargetClusterClientMockRecorder) Initialize(ctx, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockTargetClusterClient)(nil).Initialize), ctx, clusterName)
}

// ToDiscoveryClient mocks base method.
func (m *MockTargetClusterClient) ToDiscoveryClient() (discovery.CachedDiscoveryInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToDiscoveryClient")
	ret0, _ := ret[0].(discovery.CachedDiscoveryInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToDiscoveryClient indicates an expected call of ToDiscoveryClient.
func (mr *MockTargetClusterClientMockRecorder) ToDiscoveryClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToDiscoveryClient", reflect.TypeOf((*MockTargetClusterClient)(nil).ToDiscoveryClient))
}

// ToRESTConfig mocks base method.
func (m *MockTargetClusterClient) ToRESTConfig() (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRESTConfig")
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToRESTConfig indicates an expected call of ToRESTConfig.
func (mr *MockTargetClusterClientMockRecorder) ToRESTConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRESTConfig", reflect.TypeOf((*MockTargetClusterClient)(nil).ToRESTConfig))
}

// ToRESTMapper mocks base method.
func (m *MockTargetClusterClient) ToRESTMapper() (meta.RESTMapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRESTMapper")
	ret0, _ := ret[0].(meta.RESTMapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToRESTMapper indicates an expected call of ToRESTMapper.
func (mr *MockTargetClusterClientMockRecorder) ToRESTMapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRESTMapper", reflect.TypeOf((*MockTargetClusterClient)(nil).ToRESTMapper))
}

// ToRawKubeConfigLoader mocks base method.
func (m *MockTargetClusterClient) ToRawKubeConfigLoader() clientcmd.ClientConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRawKubeConfigLoader")
	ret0, _ := ret[0].(clientcmd.ClientConfig)
	return ret0
}

// ToRawKubeConfigLoader indicates an expected call of ToRawKubeConfigLoader.
func (mr *MockTargetClusterClientMockRecorder) ToRawKubeConfigLoader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRawKubeConfigLoader", reflect.TypeOf((*MockTargetClusterClient)(nil).ToRawKubeConfigLoader))
}
